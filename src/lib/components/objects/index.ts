/* eslint-disable max-len */
import * as THREE from 'three'

type C<T extends abstract new (...args: any) => any> = ConstructorParameters<T>

export const lineBasicMat = (...args: C<typeof THREE.LineBasicMaterial>) => new THREE.LineBasicMaterial(...args)
export const basicMat = (...args: C<typeof THREE.MeshBasicMaterial>) => new THREE.MeshBasicMaterial(...args)
export const depthMat = (...args: C<typeof THREE.MeshDepthMaterial>) => new THREE.MeshDepthMaterial(...args)
export const distanceMat = (...args: C<typeof THREE.MeshDistanceMaterial>) => new THREE.MeshDistanceMaterial(...args)
export const lambertMat = (...args: C<typeof THREE.MeshLambertMaterial>) => new THREE.MeshLambertMaterial(...args)
export const matcapMat = (...args: C<typeof THREE.MeshMatcapMaterial>) => new THREE.MeshMatcapMaterial(...args)
export const normalMat = (...args: C<typeof THREE.MeshNormalMaterial>) => new THREE.MeshNormalMaterial(...args)
export const phongMat = (...args: C<typeof THREE.MeshPhongMaterial>) => new THREE.MeshPhongMaterial(...args)
export const standardMat = (...args: C<typeof THREE.MeshStandardMaterial>) => new THREE.MeshStandardMaterial(...args)
export const physicalMat = (...args: C<typeof THREE.MeshPhysicalMaterial>) => new THREE.MeshPhysicalMaterial(...args)
export const toonMat = (...args: C<typeof THREE.MeshToonMaterial>) => new THREE.MeshToonMaterial(...args)
export const pointsMat = (...args: C<typeof THREE.PointsMaterial>) => new THREE.PointsMaterial(...args)
export const rawShaderMat = (...args: C<typeof THREE.RawShaderMaterial>) => new THREE.RawShaderMaterial(...args)
export const shaderMat = (...args: C<typeof THREE.ShaderMaterial>) => new THREE.ShaderMaterial(...args)
export const shadowMat = (...args: C<typeof THREE.ShadowMaterial>) => new THREE.ShadowMaterial(...args)
export const spriteMat = (...args: C<typeof THREE.SpriteMaterial>) => new THREE.SpriteMaterial(...args)

export const line = (material?: THREE.Material, ...args: C<typeof THREE.BufferGeometry>) => new THREE.Line(new THREE.BufferGeometry(...args), material)
export const box = (material?: THREE.Material, ...args: C<typeof THREE.BoxGeometry>) => new THREE.Mesh(new THREE.BoxGeometry(...args), material)
export const capsule = (material?: THREE.Material, ...args: C<typeof THREE.CapsuleGeometry>) => new THREE.Mesh(new THREE.CapsuleGeometry(...args), material)
export const circle = (material?: THREE.Material, ...args: C<typeof THREE.CircleGeometry>) => new THREE.Mesh(new THREE.CircleGeometry(...args), material)
export const cone = (material?: THREE.Material, ...args: C<typeof THREE.ConeGeometry>) => new THREE.Mesh(new THREE.ConeGeometry(...args), material)
export const cylinder = (material?: THREE.Material, ...args: C<typeof THREE.CylinderGeometry>) => new THREE.Mesh(new THREE.CylinderGeometry(...args), material)
export const dodecahedron = (material?: THREE.Material, ...args: C<typeof THREE.DodecahedronGeometry>) => new THREE.Mesh(new THREE.DodecahedronGeometry(...args), material)
export const edges = (material?: THREE.Material, ...args: C<typeof THREE.EdgesGeometry>) => new THREE.Mesh(new THREE.EdgesGeometry(...args), material)
export const extrude = (material?: THREE.Material, ...args: C<typeof THREE.ExtrudeGeometry>) => new THREE.Mesh(new THREE.ExtrudeGeometry(...args), material)
export const icosahedron = (material?: THREE.Material, ...args: C<typeof THREE.IcosahedronGeometry>) => new THREE.Mesh(new THREE.IcosahedronGeometry(...args), material)
export const lathe = (material?: THREE.Material, ...args: C<typeof THREE.LatheGeometry>) => new THREE.Mesh(new THREE.LatheGeometry(...args), material)
export const octahedron = (material?: THREE.Material, ...args: C<typeof THREE.OctahedronGeometry>) => new THREE.Mesh(new THREE.OctahedronGeometry(...args), material)
export const plane = (material?: THREE.Material, ...args: C<typeof THREE.PlaneGeometry>) => new THREE.Mesh(new THREE.PlaneGeometry(...args), material)
export const polyhedron = (material?: THREE.Material, ...args: C<typeof THREE.PolyhedronGeometry>) => new THREE.Mesh(new THREE.PolyhedronGeometry(...args), material)
export const ring = (material?: THREE.Material, ...args: C<typeof THREE.RingGeometry>) => new THREE.Mesh(new THREE.RingGeometry(...args), material)
export const shape = (material?: THREE.Material, ...args: C<typeof THREE.ShapeGeometry>) => new THREE.Mesh(new THREE.ShapeGeometry(...args), material)
export const sphere = (material?: THREE.Material, ...args: C<typeof THREE.SphereGeometry>) => new THREE.Mesh(new THREE.SphereGeometry(...args), material)
export const tetrahedron = (material?: THREE.Material, ...args: C<typeof THREE.TetrahedronGeometry>) => new THREE.Mesh(new THREE.TetrahedronGeometry(...args), material)
export const torus = (material?: THREE.Material, ...args: C<typeof THREE.TorusGeometry>) => new THREE.Mesh(new THREE.TorusGeometry(...args), material)
export const torusKnot = (material?: THREE.Material, ...args: C<typeof THREE.TorusKnotGeometry>) => new THREE.Mesh(new THREE.TorusKnotGeometry(...args), material)
export const tube = (material?: THREE.Material, ...args: C<typeof THREE.TubeGeometry>) => new THREE.Mesh(new THREE.TubeGeometry(...args), material)
export const wireframe = (material?: THREE.Material, ...args: C<typeof THREE.WireframeGeometry>) => new THREE.Mesh(new THREE.WireframeGeometry(...args), material)

export const ambientLight = (...args: C<typeof THREE.AmbientLight>) => new THREE.AmbientLight(...args)
export const directionalLight = (...args: C<typeof THREE.DirectionalLight>) => new THREE.DirectionalLight(...args)
export const hemisphereLight = (...args: C<typeof THREE.HemisphereLight>) => new THREE.HemisphereLight(...args)
export const pointLight = (...args: C<typeof THREE.PointLight>) => new THREE.PointLight(...args)
export const rectAreaLight = (...args: C<typeof THREE.RectAreaLight>) => new THREE.RectAreaLight(...args)
export const spotLight = (...args: C<typeof THREE.SpotLight>) => new THREE.SpotLight(...args)
