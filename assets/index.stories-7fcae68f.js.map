{"version":3,"file":"index.stories-7fcae68f.js","sources":["../../src/components/grid-helper/index.ts","../../src/components/grid-helper/code.js?raw"],"sourcesContent":["import * as THREE from 'three'\nimport vertexShader from './vertex.glsl'\nimport fragmentShader from './fragment.glsl'\n\nexport class GridHelper extends THREE.Mesh {\n  override frustumCulled = false\n  override material: THREE.ShaderMaterial\n\n  constructor (cellSize = 1, largeCellSize = 10, color = 'white', distance = 8000) {\n    const geometry = new THREE.PlaneGeometry()\n    const material = new THREE.ShaderMaterial({\n      side: THREE.DoubleSide,\n      uniforms: {\n        uCellSize: { value: cellSize },\n        uLargeCellSize: { value: largeCellSize },\n        uColor: { value: new THREE.Color(color) },\n        uDistance: { value: distance },\n      },\n      vertexShader,\n      fragmentShader,\n      transparent: true,\n      extensions: {\n        derivatives: true,\n      },\n    })\n    super(geometry, material)\n    this.material = material\n  }\n\n  get cellSize (): number {\n    return this.material.uniforms.uCellSize!.value\n  }\n  set cellSize (value: number) {\n    this.material.uniforms.uCellSize!.value = value\n  }\n\n  get largeCellSize (): number {\n    return this.material.uniforms.uLargeCellSize!.value\n  }\n  set largeCellSize (value: number) {\n    this.material.uniforms.uLargeCellSize!.value = value\n  }\n\n  get color (): THREE.ColorRepresentation {\n    return this.material.uniforms.uColor!.value\n  }\n  set color (value: THREE.ColorRepresentation) {\n    this.material.uniforms.uColor!.value = value\n  }\n\n  get distance (): number {\n    return this.material.uniforms.uDistance!.value\n  }\n  set distance (value: number) {\n    this.material.uniforms.uDistance!.value = value\n  }\n}\n","export default \"import * as THREE from 'three'\\nimport { GridHelper } from '.'\\n\\nconst scene = new THREE.Scene()\\nconst cellSize = 1\\nconst largeCellSize = 10\\nconst color = 'white'\\nscene.add(new GridHelper(cellSize, largeCellSize, color))\\n\""],"names":["GridHelper","THREE.Mesh","cellSize","largeCellSize","color","distance","geometry","THREE.PlaneGeometry","material","THREE.ShaderMaterial","THREE.DoubleSide","THREE.Color","vertexShader","fragmentShader","__publicField","value","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAIa,MAAAA,UAAmBC,CAAW,CAIzC,YAAaC,EAAW,EAAGC,EAAgB,GAAIC,EAAQ,QAASC,EAAW,IAAM,CACzE,MAAAC,EAAW,IAAIC,EACfC,EAAW,IAAIC,EAAqB,CACxC,KAAMC,EACN,SAAU,CACR,UAAW,CAAE,MAAOR,CAAS,EAC7B,eAAgB,CAAE,MAAOC,CAAc,EACvC,OAAQ,CAAE,MAAO,IAAIQ,EAAYP,CAAK,CAAE,EACxC,UAAW,CAAE,MAAOC,CAAS,CAC/B,EAAA,aACAO,EAAA,eACAC,EACA,YAAa,GACb,WAAY,CACV,YAAa,EACf,CAAA,CACD,EACD,MAAMP,EAAUE,CAAQ,EApBjBM,EAAA,qBAAgB,IAChBA,EAAA,iBAoBP,KAAK,SAAWN,CAClB,CAEA,IAAI,UAAoB,CACf,OAAA,KAAK,SAAS,SAAS,UAAW,KAC3C,CACA,IAAI,SAAUO,EAAe,CACtB,KAAA,SAAS,SAAS,UAAW,MAAQA,CAC5C,CAEA,IAAI,eAAyB,CACpB,OAAA,KAAK,SAAS,SAAS,eAAgB,KAChD,CACA,IAAI,cAAeA,EAAe,CAC3B,KAAA,SAAS,SAAS,eAAgB,MAAQA,CACjD,CAEA,IAAI,OAAoC,CAC/B,OAAA,KAAK,SAAS,SAAS,OAAQ,KACxC,CACA,IAAI,MAAOA,EAAkC,CACtC,KAAA,SAAS,SAAS,OAAQ,MAAQA,CACzC,CAEA,IAAI,UAAoB,CACf,OAAA,KAAK,SAAS,SAAS,UAAW,KAC3C,CACA,IAAI,SAAUA,EAAe,CACtB,KAAA,SAAS,SAAS,UAAW,MAAQA,CAC5C,CACF,CCxDA,MAAeC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;"}