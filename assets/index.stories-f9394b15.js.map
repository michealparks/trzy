{"version":3,"file":"index.stories-f9394b15.js","sources":["../../src/components/soft-shadows/index.ts","../../src/stories/soft-shadows/code.js?raw"],"sourcesContent":["// From: https://github.com/mrdoob/three.js/blob/dev/examples/webgl_shadowmap_pcss.html\n\nimport * as THREE from 'three'\nimport glsl from './index.glsl'\n\nlet added = false\n\nconst pcss = (focus: number, size: number, samples: number) => `\n#define PENUMBRA_FILTER_SIZE float(${size})\n#define FOCUS float(${focus})\n#define SAMPLES ${samples}\n#define SAMPLES_FLOAT float(${samples})\n#define SIZE float(${size})\n${glsl}`\n\nexport const resetSoftShadows = (\n  renderer: THREE.WebGLRenderer,\n  scene: THREE.Scene,\n  camera: THREE.Camera\n) => {\n  scene.traverse((object) => {\n    if (\n      object instanceof THREE.Mesh &&\n      object.material instanceof THREE.Material\n    ) {\n      renderer.properties.remove(object.material)\n      object.material.dispose()\n    }\n  })\n\n  if (renderer.info.programs !== null) {\n    renderer.info.programs.length = 0\n  }\n\n  renderer.compile(scene, camera)\n}\n\nlet original: string\n\nexport const softShadows = ({\n  focus = 0,\n  size = 25,\n  samples = 10\n}: {\n  focus?: number\n  size?: number\n  samples?: number\n} = {}) => {\n  if (!added) {\n    original = THREE.ShaderChunk.shadowmap_pars_fragment\n\n    THREE.ShaderChunk.shadowmap_pars_fragment = THREE.ShaderChunk.shadowmap_pars_fragment\n      .replace(\n        '#ifdef USE_SHADOWMAP',\n        `#ifdef USE_SHADOWMAP\\n${pcss(focus, size, samples)}`\n      )\n      .replace(\n        '#if defined( SHADOWMAP_TYPE_PCF )',\n        '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )'\n      )\n  }\n\n  added = true\n\n  return ({\n    renderer,\n    scene,\n    camera\n  }: {\n    renderer: THREE.WebGLRenderer\n    scene: THREE.Scene\n    camera: THREE.PerspectiveCamera | THREE.OrthographicCamera\n  }) => {\n    THREE.ShaderChunk.shadowmap_pars_fragment = original\n    resetSoftShadows(renderer, scene, camera)\n  }\n}\n","export default \"import { softShadows, resetSoftShadows } from 'trzy'\\n\\nsoftShadows()\\n\\n// Only needed if softShadows() is called after setting up the scene.\\nresetSoftShadows()\\n\""],"names":["added","pcss","focus","size","samples","glsl","resetSoftShadows","renderer","scene","camera","object","THREE.Mesh","THREE.Material","original","softShadows","THREE.ShaderChunk","code"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAKA,IAAIA,EAAQ,GAEZ,MAAMC,EAAO,CAACC,EAAeC,EAAcC,IAAoB;AAAA,qCAC1BD;AAAA,sBACfD;AAAA,kBACJE;AAAA,8BACYA;AAAA,qBACTD;AAAA,EACnBE,IAEWC,EAAmB,CAC9BC,EACAC,EACAC,IACG,CACGD,EAAA,SAAUE,GAAW,CAEvBA,aAAkBC,GAClBD,EAAO,oBAAoBE,IAElBL,EAAA,WAAW,OAAOG,EAAO,QAAQ,EAC1CA,EAAO,SAAS,UAClB,CACD,EAEGH,EAAS,KAAK,WAAa,OACpBA,EAAA,KAAK,SAAS,OAAS,GAGzBA,EAAA,QAAQC,EAAOC,CAAM,CAChC,EAEA,IAAII,EAEG,MAAMC,EAAc,CAAC,CAC1B,MAAAZ,EAAQ,EACR,KAAAC,EAAO,GACP,QAAAC,EAAU,EACZ,EAII,MACGJ,IACHa,EAAWE,EAAkB,wBAE7BA,EAAkB,wBAA0BA,EAAkB,wBAC3D,QACC,uBACA;AAAA,EAAyBd,EAAKC,EAAOC,EAAMC,CAAO,GAAA,EAEnD,QACC,oCACA;AAAA;AAAA,kCAAA,GAIEJ,EAAA,GAED,CAAC,CACN,SAAAO,EACA,MAAAC,EACA,OAAAC,CAAA,IAKI,CACJM,EAAkB,wBAA0BF,EAC3BP,EAAAC,EAAUC,EAAOC,CAAM,CAAA,GC1E7BO,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;"}