{"version":3,"file":"index.stories-3ed40ef1.js","sources":["../../src/components/soft-shadows/index.ts","../../src/stories/soft-shadows/code.js?raw"],"sourcesContent":["/*  Integration and compilation: @N8Programs\n    Inspired by:\n     https://github.com/mrdoob/three.js/blob/dev/examples/webgl_shadowmap_pcss.html\n     https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-17-efficient-soft-edged-shadows-using\n     https://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf\n     https://github.com/mrdoob/three.js/blob/master/examples/webgl_shadowmap_pcss.html [spidersharma03]\n     https://spline.design/\n   Concept:\n     https://www.gamedev.net/tutorials/programming/graphics/contact-hardening-soft-shadows-made-fast-r4906/\n   Vogel Disk Implementation:\n     https://www.shadertoy.com/view/4l3yRM [ashalah]\n   High-Frequency Noise Implementation:\n     https://www.shadertoy.com/view/tt3fDH [spawner64]\n*/\n\nimport * as THREE from 'three'\n\nexport const resetSoftShadows = (renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) => {\n  scene.traverse((object) => {\n    if ('material' in object) {\n      const material = object.material as THREE.Material\n      renderer.properties.remove(material)\n      material.dispose()\n    }\n  })\n\n  if (renderer.info.programs !== null) {\n    renderer.info.programs.length = 0\n  }\n\n  renderer.compile(scene, camera)\n}\n\nexport const softShadows = ({ focus = 0, size = 25, samples = 10 }: {\n  /** Size of the light source (the larger the softer the light), default: 25 */\n  size?: number\n  /** Number of samples (more samples less noise but more expensive), default: 10 */\n  samples?: number\n  /** Depth focus, use it to shift the focal point (where the shadow is the sharpest), default: 0 (the beginning) */\n  focus?: number\n} = {}) => {\n  const original = THREE.ShaderChunk.shadowmap_pars_fragment\n  THREE.ShaderChunk.shadowmap_pars_fragment = THREE.ShaderChunk.shadowmap_pars_fragment\n    .replace(\n      '#ifdef USE_SHADOWMAP',\n      '#ifdef USE_SHADOWMAP\\n' +\n        `\n    #define PENUMBRA_FILTER_SIZE float(${size})\n    #define RGB_NOISE_FUNCTION(uv) (randRGB(uv))\n    vec3 randRGB(vec2 uv) {\n      return vec3(\n        fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n        fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n        fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n      );\n    }\n    \n    vec3 lowPassRandRGB(vec2 uv) {\n      // 3x3 convolution (average)\n      // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9\n      vec3 result = vec3(0);\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));\n      result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));\n      result *= 0.111111111; // 1.0 / 9.0\n      return result;\n    }\n    vec3 highPassRandRGB(vec2 uv) {\n      // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal\n      // hp(x) = x - lp(x)\n      return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;\n    }\n    \n    \n    vec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {\n      const float goldenAngle = 2.399963f; // radians\n      float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));\n      float theta = float(sampleIndex) * goldenAngle + angle;\n      float sine = sin(theta);\n      float cosine = cos(theta);\n      return vec2(cosine, sine) * r;\n    }\n    float penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n      return (zReceiver - zBlocker) / zBlocker;\n    }\n    float findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float blockerDepthSum = float(${focus});\n      float blockers = 0.0;\n    \n      int j = 0;\n      vec2 offset = vec2(0.);\n      float depth = 0.;\n    \n      #pragma unroll_loop_start\n      for(int i = 0; i < ${samples}; i ++) {\n        offset = (vogelDiskSample(j, ${samples}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;\n        depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));\n        if (depth < compare) {\n          blockerDepthSum += depth;\n          blockers++;\n        }\n        j++;\n      }\n      #pragma unroll_loop_end\n    \n      if (blockers > 0.0) {\n        return blockerDepthSum / blockers;\n      }\n      return -1.0;\n    }\n            \n    float vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {\n      float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n      float shadow = 0.0f;\n      int j = 0;\n      vec2 vogelSample = vec2(0.0);\n      vec2 offset = vec2(0.0);\n      #pragma unroll_loop_start\n      for (int i = 0; i < ${samples}; i++) {\n        vogelSample = vogelDiskSample(j, ${samples}, angle) * texelSize;\n        offset = vogelSample * (1.0 + filterRadius * float(${size}));\n        shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );\n        j++;\n      }\n      #pragma unroll_loop_end\n      return shadow * 1.0 / ${samples}.0;\n    }\n    \n    float PCSS (sampler2D shadowMap, vec4 coords) {\n      vec2 uv = coords.xy;\n      float zReceiver = coords.z; // Assumed to be eye-space z in this code\n      float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;\n      float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);\n      if (avgBlockerDepth == -1.0) {\n        return 1.0;\n      }\n      float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n      return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);\n    }`\n    )\n    .replace(\n      '#if defined( SHADOWMAP_TYPE_PCF )',\n      '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )'\n    )\n  return (renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) => {\n    THREE.ShaderChunk.shadowmap_pars_fragment = original\n    resetSoftShadows(renderer, scene, camera)\n  }\n}\n","export default \"import { softShadows, resetSoftShadows } from 'trzy'\\n\\nsoftShadows()\\n\\n// Only needed if softShadows() is called after setting up the scene.\\nresetSoftShadows()\\n\""],"names":["resetSoftShadows","renderer","scene","camera","object","material","softShadows","focus","size","samples","original","THREE.ShaderChunk","code"],"mappings":"mFAiBO,MAAMA,EAAmB,CAACC,EAA+BC,EAAoBC,IAAyB,CACrGD,EAAA,SAAUE,GAAW,CACzB,GAAI,aAAcA,EAAQ,CACxB,MAAMC,EAAWD,EAAO,SACfH,EAAA,WAAW,OAAOI,CAAQ,EACnCA,EAAS,QAAQ,EACnB,CACD,EAEGJ,EAAS,KAAK,WAAa,OACpBA,EAAA,KAAK,SAAS,OAAS,GAGzBA,EAAA,QAAQC,EAAOC,CAAM,CAChC,EAEaG,EAAc,CAAC,CAAE,MAAAC,EAAQ,EAAG,KAAAC,EAAO,GAAI,QAAAC,EAAU,EAO1D,EAAA,KAAO,CACH,MAAAC,EAAWC,EAAkB,wBACnCA,OAAAA,EAAkB,wBAA0BA,EAAkB,wBAC3D,QACC,uBACA;AAAA;AAAA,yCAEmCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCA8CHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAQXE;AAAA,uCACYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAuBXA;AAAA,2CACeA;AAAA,6DACkBD;AAAA;AAAA;AAAA;AAAA;AAAA,8BAK/BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,EAezB,QACC,oCACA;AAAA;AAAA,kCAAA,EAEG,CAACR,EAA+BC,EAAoBC,IAAyB,CAClFQ,EAAkB,wBAA0BD,EAC3BV,EAAAC,EAAUC,EAAOC,CAAM,CAAA,CAE5C,EC3JeS,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;"}