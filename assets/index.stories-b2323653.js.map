{"version":3,"file":"index.stories-b2323653.js","sources":["../../node_modules/three/examples/jsm/libs/motion-controllers.module.js","../../node_modules/three/examples/jsm/webxr/XRControllerModelFactory.js","../../src/components/xr/controller.ts","../../src/components/lib/events.ts","../../node_modules/three/examples/jsm/webxr/XRHandPrimitiveModel.js","../../node_modules/three/examples/jsm/webxr/XRHandMeshModel.js","../../node_modules/three/examples/jsm/webxr/XRHandModelFactory.js","../../src/components/xr/hand.ts","../../src/components/xr/index.ts","../../src/components/xr/code.js?raw"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst Constants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath);\n\n  // Find the relative path to the first requested profile that is recognized\n  let match;\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId];\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n\n  let assetPath;\n  if (getAssetPath) {\n    let layout;\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n    if (!layout) {\n      throw new Error(\n        `No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`\n      );\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return { profile, assetPath };\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: Constants.ComponentState.DEFAULT\n};\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y;\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt((x * x) + (y * y));\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: (xAxis * 0.5) + 0.5,\n    normalizedYAxis: (yAxis * 0.5) + 0.5\n  };\n  return result;\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === Constants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({\n    xAxis, yAxis, button, state\n  }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis);\n    switch (this.componentProperty) {\n      case Constants.ComponentProperty.X_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedXAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.Y_AXIS:\n        this.value = (this.states.includes(state)) ? normalizedYAxis : 0.5;\n        break;\n      case Constants.ComponentProperty.BUTTON:\n        this.value = (this.states.includes(state)) ? button : 0;\n        break;\n      case Constants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === Constants.VisualResponseProperty.VISIBILITY) {\n          this.value = (this.states.includes(state));\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n        break;\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId\n     || !componentDescription\n     || !componentDescription.visualResponses\n     || !componentDescription.gamepadIndices\n     || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName;\n\n    // Build all the visual responses for this component\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    });\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n\n    this.values = {\n      state: Constants.ComponentState.DEFAULT,\n      button: (this.gamepadIndices.button !== undefined) ? 0 : undefined,\n      xAxis: (this.gamepadIndices.xAxis !== undefined) ? 0 : undefined,\n      yAxis: (this.gamepadIndices.yAxis !== undefined) ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values };\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = Constants.ComponentState.DEFAULT;\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined\n        && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = (this.values.button < 0) ? 0 : this.values.button;\n      this.values.button = (this.values.button > 1) ? 1 : this.values.button;\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = Constants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > Constants.ButtonTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = (this.values.xAxis < -1) ? -1 : this.values.xAxis;\n      this.values.xAxis = (this.values.xAxis > 1) ? 1 : this.values.xAxis;\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.xAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined\n        && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = (this.values.yAxis < -1) ? -1 : this.values.yAxis;\n      this.values.yAxis = (this.values.yAxis > 1) ? 1 : this.values.yAxis;\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (this.values.state === Constants.ComponentState.DEFAULT\n        && Math.abs(this.values.yAxis) > Constants.AxisTouchThreshold) {\n        this.values.state = Constants.ComponentState.TOUCHED;\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n}\n\n/**\n  * @description Builds a motion controller with components and visual responses based on the\n  * supplied profile description. Data is polled from the xrInputSource's gamepad.\n  * @author Nell Waliczek / https://github.com/NellWaliczek\n*/\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId;\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    });\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data);\n    });\n    return data;\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n}\n\nexport { Constants, MotionController, fetchProfile, fetchProfilesList };\n","import {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} from 'three';\n\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from '../libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader = null ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\n\t\t// If a GLTFLoader wasn't supplied to the constructor create a new one.\n\t\tif ( ! this.gltfLoader ) {\n\n\t\t\tthis.gltfLoader = new GLTFLoader();\n\n\t\t}\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n","import { type XRControllerModel, XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory'\n\nlet built = false\n\nlet model0: XRControllerModel\nlet model1: XRControllerModel\n\nlet grip0: THREE.XRGripSpace\nlet grip1: THREE.XRGripSpace\n\nlet controller0: THREE.XRTargetRaySpace\nlet controller1: THREE.XRTargetRaySpace\n\nconst buildControllers = (renderer: THREE.WebGLRenderer) => {\n  const controllerModelFactory = new XRControllerModelFactory()\n\n  controller0 = renderer.xr.getController(0)\n  controller0.name = 'XR Controller Left'\n  controller0.userData.index = 0\n\n  controller1 = renderer.xr.getController(1)\n  controller1.name = 'XR Controller Right'\n  controller1.userData.index = 1\n\n  grip0 = renderer.xr.getControllerGrip(0)\n  grip0.name = 'XR Controller Grip Left'\n  grip0.userData.index = 0\n\n  model0 = controllerModelFactory.createControllerModel(grip0)\n  grip0.add(model0)\n\n  grip1 = renderer.xr.getControllerGrip(1)\n  grip1.name = 'XR Controller Grip Right'\n  grip1.userData.index = 1\n\n  model1 = controllerModelFactory.createControllerModel(grip1)\n  grip1.add(model1)\n\n  built = true\n}\n\nexport const getControllers = (renderer: THREE.WebGLRenderer) => {\n  if (!built) {\n    buildControllers(renderer)\n  }\n\n  return { grip0, grip1, controller0, controller1 }\n}\n\nexport const getControllerModels = (renderer: THREE.WebGLRenderer) => {\n  if (!built) {\n    buildControllers(renderer)\n  }\n\n  return { model0, model1 }\n}\n","export const dispatcher = () => {\n  const listeners: Record<string, (() => void)[]> = {}\n\n  const on = (event: string, fn: () => void) => {\n    listeners[event] ??= []\n    listeners[event]!.push(fn)\n  }\n\n  const off = (event: string, fn: () => void) => {\n    const fns = listeners[event]\n\n    if (fns === undefined) {\n      return\n    }\n\n    fns.splice(fns.indexOf(fn), 1)\n  }\n\n  const fire = (event: string) => {\n    const fns = listeners[event]\n\n    if (fns === undefined) {\n      return\n    }\n\n    for (let index = 0, length = fns.length; index < length; index += 1) {\n      fns[index]!()\n    }\n  }\n\n  return {\n    listeners,\n    on,\n    off,\n    fire,\n  }\n}\n","import {\n\tDynamicDrawUsage,\n\tSphereGeometry,\n\tBoxGeometry,\n\tMeshStandardMaterial,\n\tInstancedMesh,\n\tMatrix4,\n\tVector3\n} from 'three';\n\nconst _matrix = new Matrix4();\nconst _vector = new Vector3();\n\nclass XRHandPrimitiveModel {\n\n\tconstructor( handModel, controller, path, handedness, options ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\t\tthis.envMap = null;\n\n\t\tlet geometry;\n\n\t\tif ( ! options || ! options.primitive || options.primitive === 'sphere' ) {\n\n\t\t\tgeometry = new SphereGeometry( 1, 10, 10 );\n\n\t\t} else if ( options.primitive === 'box' ) {\n\n\t\t\tgeometry = new BoxGeometry( 1, 1, 1 );\n\n\t\t}\n\n\t\tconst material = new MeshStandardMaterial();\n\n\t\tthis.handMesh = new InstancedMesh( geometry, material, 30 );\n\t\tthis.handMesh.frustumCulled = false;\n\t\tthis.handMesh.instanceMatrix.setUsage( DynamicDrawUsage ); // will be updated every frame\n\t\tthis.handMesh.castShadow = true;\n\t\tthis.handMesh.receiveShadow = true;\n\t\tthis.handModel.add( this.handMesh );\n\n\t\tthis.joints = [\n\t\t\t'wrist',\n\t\t\t'thumb-metacarpal',\n\t\t\t'thumb-phalanx-proximal',\n\t\t\t'thumb-phalanx-distal',\n\t\t\t'thumb-tip',\n\t\t\t'index-finger-metacarpal',\n\t\t\t'index-finger-phalanx-proximal',\n\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t'index-finger-phalanx-distal',\n\t\t\t'index-finger-tip',\n\t\t\t'middle-finger-metacarpal',\n\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t'middle-finger-phalanx-distal',\n\t\t\t'middle-finger-tip',\n\t\t\t'ring-finger-metacarpal',\n\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t'ring-finger-phalanx-distal',\n\t\t\t'ring-finger-tip',\n\t\t\t'pinky-finger-metacarpal',\n\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t'pinky-finger-tip'\n\t\t];\n\n\t}\n\n\tupdateMesh() {\n\n\t\tconst defaultRadius = 0.008;\n\t\tconst joints = this.controller.joints;\n\n\t\tlet count = 0;\n\n\t\tfor ( let i = 0; i < this.joints.length; i ++ ) {\n\n\t\t\tconst joint = joints[ this.joints[ i ] ];\n\n\t\t\tif ( joint.visible ) {\n\n\t\t\t\t_vector.setScalar( joint.jointRadius || defaultRadius );\n\t\t\t\t_matrix.compose( joint.position, joint.quaternion, _vector );\n\t\t\t\tthis.handMesh.setMatrixAt( i, _matrix );\n\n\t\t\t\tcount ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.handMesh.count = count;\n\t\tthis.handMesh.instanceMatrix.needsUpdate = true;\n\n\t}\n\n}\n\nexport { XRHandPrimitiveModel };\n","import { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nconst DEFAULT_HAND_PROFILE_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/';\n\nclass XRHandMeshModel {\n\n\tconstructor( handModel, controller, path, handedness, loader = null ) {\n\n\t\tthis.controller = controller;\n\t\tthis.handModel = handModel;\n\n\t\tthis.bones = [];\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new GLTFLoader();\n\t\t\tloader.setPath( path || DEFAULT_HAND_PROFILE_PATH );\n\n\t\t}\n\n\t\tloader.load( `${handedness}.glb`, gltf => {\n\n\t\t\tconst object = gltf.scene.children[ 0 ];\n\t\t\tthis.handModel.add( object );\n\n\t\t\tconst mesh = object.getObjectByProperty( 'type', 'SkinnedMesh' );\n\t\t\tmesh.frustumCulled = false;\n\t\t\tmesh.castShadow = true;\n\t\t\tmesh.receiveShadow = true;\n\n\t\t\tconst joints = [\n\t\t\t\t'wrist',\n\t\t\t\t'thumb-metacarpal',\n\t\t\t\t'thumb-phalanx-proximal',\n\t\t\t\t'thumb-phalanx-distal',\n\t\t\t\t'thumb-tip',\n\t\t\t\t'index-finger-metacarpal',\n\t\t\t\t'index-finger-phalanx-proximal',\n\t\t\t\t'index-finger-phalanx-intermediate',\n\t\t\t\t'index-finger-phalanx-distal',\n\t\t\t\t'index-finger-tip',\n\t\t\t\t'middle-finger-metacarpal',\n\t\t\t\t'middle-finger-phalanx-proximal',\n\t\t\t\t'middle-finger-phalanx-intermediate',\n\t\t\t\t'middle-finger-phalanx-distal',\n\t\t\t\t'middle-finger-tip',\n\t\t\t\t'ring-finger-metacarpal',\n\t\t\t\t'ring-finger-phalanx-proximal',\n\t\t\t\t'ring-finger-phalanx-intermediate',\n\t\t\t\t'ring-finger-phalanx-distal',\n\t\t\t\t'ring-finger-tip',\n\t\t\t\t'pinky-finger-metacarpal',\n\t\t\t\t'pinky-finger-phalanx-proximal',\n\t\t\t\t'pinky-finger-phalanx-intermediate',\n\t\t\t\t'pinky-finger-phalanx-distal',\n\t\t\t\t'pinky-finger-tip',\n\t\t\t];\n\n\t\t\tjoints.forEach( jointName => {\n\n\t\t\t\tconst bone = object.getObjectByName( jointName );\n\n\t\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\t\tbone.jointName = jointName;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( `Couldn't find ${jointName} in ${handedness} hand mesh` );\n\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push( bone );\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tupdateMesh() {\n\n\t\t// XR Joints\n\t\tconst XRJoints = this.controller.joints;\n\n\t\tfor ( let i = 0; i < this.bones.length; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tconst XRJoint = XRJoints[ bone.jointName ];\n\n\t\t\t\tif ( XRJoint.visible ) {\n\n\t\t\t\t\tconst position = XRJoint.position;\n\n\t\t\t\t\tbone.position.copy( position );\n\t\t\t\t\tbone.quaternion.copy( XRJoint.quaternion );\n\t\t\t\t\t// bone.scale.setScalar( XRJoint.jointRadius || defaultRadius );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { XRHandMeshModel };\n","import {\n\tObject3D\n} from 'three';\n\nimport {\n\tXRHandPrimitiveModel\n} from './XRHandPrimitiveModel.js';\n\nimport {\n\tXRHandMeshModel\n} from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n\n\tconstructor( controller ) {\n\n\t\tsuper();\n\n\t\tthis.controller = controller;\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t\tthis.mesh = null;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.motionController ) {\n\n\t\t\tthis.motionController.updateMesh();\n\n\t\t}\n\n\t}\n\n}\n\nclass XRHandModelFactory {\n\n\tconstructor() {\n\n\t\tthis.path = null;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\n\t\treturn this;\n\n\t}\n\n\tcreateHandModel( controller, profile ) {\n\n\t\tconst handModel = new XRHandModel( controller );\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.hand && ! handModel.motionController ) {\n\n\t\t\t\thandModel.xrInputSource = xrInputSource;\n\n\t\t\t\t// @todo Detect profile if not provided\n\t\t\t\tif ( profile === undefined || profile === 'spheres' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'sphere' } );\n\n\t\t\t\t} else if ( profile === 'boxes' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'box' } );\n\n\t\t\t\t} else if ( profile === 'mesh' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandMeshModel( handModel, controller, this.path, xrInputSource.handedness );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = true;\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontroller.visible = false;\n\t\t\t// handModel.motionController = null;\n\t\t\t// handModel.remove( scene );\n\t\t\t// scene = null;\n\n\t\t} );\n\n\t\treturn handModel;\n\n\t}\n\n}\n\nexport { XRHandModelFactory };\n","import { XRHandModelFactory } from 'three/examples/jsm/webxr/XRHandModelFactory'\n\nlet built = false\n\nlet hand0: THREE.XRHandSpace\nlet hand1: THREE.XRHandSpace\n\nconst buildHands = (renderer: THREE.WebGLRenderer) => {\n  const handModelFactory = new XRHandModelFactory()\n\n  hand0 = renderer.xr.getHand(0)\n  hand0.name = 'XR Hand Left'\n  hand0.userData.index = 0\n\n  const model0 = handModelFactory.createHandModel(hand0, 'mesh')\n  model0.name = 'XR Hand Model Left'\n  hand0.add(model0)\n\n  hand1 = renderer.xr.getHand(1)\n  hand1.name = 'XR Hand Right'\n  hand0.userData.index = 1\n\n  const model1 = handModelFactory.createHandModel(hand1, 'mesh')\n  model1.name = 'XR Hand Model Right'\n  hand1.add(model1)\n\n  built = true\n}\n\nexport const getHands = (renderer: THREE.WebGLRenderer) => {\n  if (!built) {\n    buildHands(renderer)\n  }\n\n  return { hand0, hand1 }\n}\n","import { getControllerModels, getControllers } from './controller'\nimport { createTeleport } from './teleport'\nimport { dispatcher } from '../lib/events'\nimport { getHands } from './hand'\n\nconst events = dispatcher()\n\nlet entered = false\nlet controllersEnabled = false\nlet handsEnabled = false\n\nlet session: XRSession | undefined\n\nlet _renderer: THREE.WebGLRenderer\nlet _scene: THREE.Scene\nlet _camera: THREE.Camera\nlet teleport: undefined | ReturnType<typeof createTeleport>\n\nconst supportStateMessages = {\n  allowed: 'Enter VR',\n  not_allowed: 'VR is not allowed',\n  not_secure: 'VR requires HTTPS',\n  not_supported: 'VR not supported',\n} as const\n\nconst setup = (renderer: THREE.WebGLRenderer, scene: THREE.Scene, camera: THREE.Camera) => {\n  _renderer = renderer\n  _scene = scene\n  _camera = camera\n\n  _renderer.xr.enabled = true\n}\n\nconst requestSessionSupport = async (): Promise<'allowed' | 'not_allowed' | 'not_secure' | 'not_supported'> => {\n  if (navigator.xr === undefined) {\n    return 'not_supported'\n  }\n\n  if (!window.isSecureContext) {\n    return 'not_secure'\n  }\n\n  try {\n    const supported = await navigator.xr.isSessionSupported('immersive-vr')\n    return supported ? 'allowed' : 'not_supported'\n  } catch {\n    return 'not_allowed'\n  }\n}\n\nconst handleEnd = () => events.fire('end')\nconst handleExit = () => events.fire('exit')\n\nconst requestSession = async () => {\n  if (navigator.xr === undefined) {\n    throw new Error('navigator.xr is undefined!')\n  }\n\n  session = await navigator.xr.requestSession('immersive-vr', {\n    optionalFeatures: [\n      'local-floor',\n      'bounded-floor',\n      'hand-tracking',\n      'layers',\n    ],\n  })\n\n  session.addEventListener('end', handleEnd)\n  session.addEventListener('exit', handleExit)\n\n  await _renderer.xr.setSession(session)\n\n  entered = true\n  events.fire('enter')\n}\n\nconst endSession = (): void => {\n  entered = false\n  session?.end()\n}\n\nconst createButton = async () => {\n  const xrSupport = await requestSessionSupport()\n  const button = document.createElement('button')\n  button.textContent = supportStateMessages[xrSupport]\n\n  if (xrSupport === 'allowed') {\n    button.addEventListener('click', requestSession)\n  }\n\n  return button\n}\n\nconst toggleControllers = (enable: boolean) => {\n  controllersEnabled = enable\n\n  const { grip0, grip1, controller0, controller1 } = getControllers(_renderer)\n\n  if (enable) {\n    _scene.add(grip0, grip1, controller0, controller1)\n  } else {\n    _scene.remove(grip0, grip1, controller0, controller1)\n  }\n}\n\nconst toggleHands = (enable: boolean) => {\n  handsEnabled = enable\n\n  const { hand0, hand1 } = getHands(_renderer)\n\n  if (enable) {\n    _scene.add(hand0, hand1)\n  } else {\n    _scene.remove(hand0, hand1)\n  }\n}\n\nconst enableTeleport = (...navMeshes: THREE.Object3D[]) => {\n  if (teleport === undefined) {\n    const { controller0, controller1 } = getControllers(_renderer)\n    teleport = createTeleport(_renderer, _scene, _camera, [controller0, controller1])\n  }\n\n  if (!controllersEnabled) {\n    toggleControllers(true)\n  }\n\n  teleport.enable(...navMeshes)\n}\n\nconst disableTeleport = () => {\n  teleport?.disable()\n}\n\nconst update = (delta: number) => {\n  teleport?.update(delta)\n}\n\nexport const xr = {\n  get entered () {\n    return entered\n  },\n  get handsEnabled () {\n    return handsEnabled\n  },\n  get controllersEnabled () {\n    return controllersEnabled\n  },\n  supportStateMessages,\n  setup,\n  createButton,\n  requestSessionSupport,\n  requestSession,\n  endSession,\n  enableTeleport,\n  disableTeleport,\n  getControllers: () => getControllers(_renderer),\n  getControllerModels: () => getControllerModels(_renderer),\n  getHands: () => getHands(_renderer),\n  toggleControllers,\n  toggleHands,\n  update,\n  ...events,\n}\n","export default \"import { trzy, xr } from 'trzy'\\n\\nconst { renderer, scene, camera, xr } = trzy()\\n\\nxr.setup(renderer, scene, camera.current)\\n\\nconst button = await xr.createButton()\\ncontainer.append(button)\\n\\nxr.enableTeleport(floor)\\n\""],"names":["Constants","fetchJsonFile","path","response","fetchProfilesList","basePath","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","match","profileId","supportedProfile","profile","assetPath","layout","defaultComponentValues","normalizeAxes","x","y","xAxis","yAxis","theta","VisualResponse","visualResponseDescription","button","state","normalizedXAxis","normalizedYAxis","Component","componentId","componentDescription","responseName","visualResponse","gamepad","gamepadButton","MotionController","assetUrl","data","component","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","Object3D","envMap","child","force","valueNode","minNode","maxNode","value","valueNodeProperty","MotionControllerConstants","findNodes","motionController","scene","type","touchPointNodeName","visualResponses","sphereGeometry","SphereGeometry","material","MeshBasicMaterial","sphere","Mesh","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","GLTFLoader","controller","event","cachedAsset","asset","err","built","model0","model1","grip0","grip1","controller0","controller1","buildControllers","renderer","controllerModelFactory","getControllers","getControllerModels","dispatcher","listeners","fn","fns","index","length","_matrix","Matrix4","_vector","Vector3","XRHandPrimitiveModel","handModel","handedness","options","geometry","BoxGeometry","MeshStandardMaterial","InstancedMesh","DynamicDrawUsage","joints","count","i","joint","DEFAULT_HAND_PROFILE_PATH","XRHandMeshModel","loader","gltf","object","mesh","jointName","bone","XRJoints","XRJoint","position","XRHandModel","XRHandModelFactory","hand0","hand1","buildHands","handModelFactory","getHands","events","entered","controllersEnabled","handsEnabled","session","_renderer","_scene","_camera","teleport","supportStateMessages","setup","camera","requestSessionSupport","handleEnd","handleExit","requestSession","endSession","createButton","xrSupport","toggleControllers","enable","toggleHands","enableTeleport","navMeshes","createTeleport","disableTeleport","update","delta","xr","code"],"mappings":"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","x_google_ignoreList":[0,1,4,5,6]}