{"version":3,"file":"index.stories-d33700e9.js","sources":["../../src/components/view-helper/index.ts","../../src/components/view-helper/code.js?raw"],"sourcesContent":["import * as THREE from 'three'\n\nconst getAxisMaterial = (color: THREE.Color) => {\n  return new THREE.MeshBasicMaterial({ color, toneMapped: false })\n}\n\nconst getSpriteMaterial = (color?: THREE.Color, text?: string | undefined) => {\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')\n\n  canvas.width = 64\n  canvas.height = 64\n\n  if (context !== null) {\n    context.beginPath()\n    context.arc(32, 32, 16, 0, 2 * Math.PI)\n    context.closePath()\n    context.fillStyle = color?.getStyle() ?? ''\n    context.fill()\n\n    if (text !== undefined) {\n      context.font = '24px system-ui'\n      context.textAlign = 'center'\n      context.fillStyle = '#000000'\n      context.fillText(text.toUpperCase(), 32, 41)\n    }\n  }\n\n  const map = new THREE.CanvasTexture(canvas)\n\n  return new THREE.SpriteMaterial({ map, toneMapped: false })\n}\n\ninterface Options {\n  colors?: [x: string, y: string, z: string]\n}\n\nexport class ViewHelper extends THREE.Object3D {\n  isViewHelper = true\n  animating = false\n  center = new THREE.Vector3()\n\n  /**\n   * Turn rate in angles per second. Default is `2 * Math.PI`\n   */\n  turnRate = 2 * Math.PI\n\n  dispose: () => void\n\n  constructor (camera: THREE.Camera, renderer: THREE.WebGLRenderer, options: Options = {}) {\n    super()\n\n    const axisLetters = ['x', 'y', 'z', 'x', 'y', 'z'] as const\n\n    const canvas = renderer.domElement\n    const colorHexes = options.colors ?? ['#ff3653', '#8adb00', '#2c8fff']\n    const targetPosition = new THREE.Vector3()\n    const targetQuaternion = new THREE.Quaternion()\n\n    const clock = new THREE.Clock()\n    const q1 = new THREE.Quaternion()\n    const q2 = new THREE.Quaternion()\n    const euler = new THREE.Euler()\n    const viewport = new THREE.Vector4()\n    let radius = 0\n\n    const geometry = new THREE.BoxGeometry(0.8, 0.05, 0.05).translate(0.4, 0, 0)\n    const colors = colorHexes.map((hex) => new THREE.Color(hex))\n    const axes = colors.map((color) => new THREE.Mesh(geometry, getAxisMaterial(color)))\n\n    const raycaster = new THREE.Raycaster()\n    const pointer = new THREE.Vector2()\n    const dummy = new THREE.Object3D()\n\n    const orthoCamera = new THREE.OrthographicCamera(-2, 2, 2, -2, 0, 4)\n    orthoCamera.position.set(0, 0, 2)\n\n    axes[1]?.rotation.set(0, 0, Math.PI / 2)\n    axes[2]?.rotation.set(0, -Math.PI / 2, 0)\n\n    axes.forEach((axis) => this.add(axis))\n\n    const helpers = axisLetters.map((name, index) => {\n      const sign = index > 2 ? -1 : 1\n      const material = getSpriteMaterial(colors[index % 3], sign === 1 ? name : undefined)\n      const sprite = new THREE.Sprite(material)\n      sprite.position[name] = sign\n      sprite.scale.setScalar(sign === 1 ? 1 : 0.8)\n      sprite.userData = { name, sign }\n      return sprite\n    })\n\n    helpers.forEach((helper) => this.add(helper))\n\n    const point = new THREE.Vector3()\n    const dim = 220\n\n    let oldClear = false\n\n    const oldRender = renderer.render\n\n    // eslint-disable-next-line consistent-return\n    const animationAngle = (axis: 'x' | 'y' | 'z' | '-x' | '-y' | '-z') => {\n      switch (axis) {\n      case 'x': { return euler.set(0, Math.PI * 0.5, 0) }\n      case 'y': { return euler.set(-Math.PI * 0.5, 0, 0) }\n      case 'z': { return euler.set(0, 0, 0) }\n      case '-x': { return euler.set(0, -Math.PI * 0.5, 0) }\n      case '-y': { return euler.set(Math.PI * 0.5, 0, 0) }\n      case '-z': { return euler.set(0, Math.PI, 0) }\n      }\n    }\n\n    const render = () => {\n      this.quaternion.copy(camera.quaternion).invert()\n\n      point.set(0, 0, 1).applyQuaternion(camera.quaternion)\n\n      axisLetters.forEach((letter, index) => {\n        const helper = helpers[index]\n\n        if (helper === undefined) {\n          return\n        }\n\n        if (index < 3) {\n          helper.material.opacity = point[letter] >= 0 ? 1 : 0.5\n        } else {\n          helper.material.opacity = point[letter] < 0 ? 1 : 0.5\n        }\n      })\n\n      oldClear = renderer.autoClear\n      renderer.autoClear = false\n\n      renderer.clearDepth()\n      renderer.getViewport(viewport)\n      renderer.setViewport((canvas.offsetWidth * window.devicePixelRatio) - dim, 0, dim, dim)\n      oldRender.call(renderer, this, orthoCamera)\n      renderer.setViewport(viewport)\n\n      // Restore default\n      renderer.autoClear = oldClear\n    }\n\n    const update = (delta: number) => {\n      const step = delta * this.turnRate\n\n      // Animate position by doing a slerp and then scaling the position on the unit sphere\n\n      q1.rotateTowards(q2, step)\n      camera.position.set(0, 0, 1)\n        .applyQuaternion(q1)\n        .multiplyScalar(radius)\n        .add(this.center)\n\n      // Animate orientation\n      camera.quaternion.rotateTowards(targetQuaternion, step)\n\n      if (q1.angleTo(q2) === 0) {\n        this.animating = false\n      }\n    }\n\n    const prepareAnimationData = (object: THREE.Object3D, focusPoint: THREE.Vector3) => {\n      targetPosition.set(0, 0, 0)\n      targetPosition[object.userData.name as 'x' | 'y' | 'z'] = object.userData.sign as 1 | -1\n      targetQuaternion.setFromEuler(animationAngle(object.userData.name))\n\n      radius = camera.position.distanceTo(focusPoint)\n      targetPosition.multiplyScalar(radius).add(focusPoint)\n\n      dummy.position.copy(focusPoint)\n\n      dummy.lookAt(camera.position)\n      q1.copy(dummy.quaternion)\n\n      dummy.lookAt(targetPosition)\n      q2.copy(dummy.quaternion)\n    }\n\n    const handleClick = (event: MouseEvent) => {\n      if (this.animating) {\n        return\n      }\n\n      const rect = canvas.getBoundingClientRect()\n      const offsetX = rect.left + ((canvas.offsetWidth) - dim)\n      const offsetY = rect.top + ((canvas.offsetHeight) - dim)\n\n      pointer.x = (((event.clientX - offsetX) / (rect.right - offsetX)) * 2) - 1\n      pointer.y = -(((event.clientY - offsetY) / (rect.bottom - offsetY)) * 2) + 1\n\n      raycaster.setFromCamera(pointer, orthoCamera)\n\n      const intersects = raycaster.intersectObjects(helpers)\n\n      const [intersection] = intersects\n\n      if (intersection === undefined) {\n        return\n      }\n\n      prepareAnimationData(intersection.object, this.center)\n\n      this.animating = true\n    }\n\n    renderer.render = (...args) => {\n      oldRender.call(renderer, ...args)\n      render()\n      if (this.animating) {\n        update(clock.getDelta())\n      }\n    }\n\n    canvas.addEventListener('click', handleClick)\n    canvas.addEventListener('mousemove', handleClick)\n\n    this.dispose = () => {\n      canvas.removeEventListener('click', handleClick)\n      renderer.render = oldRender\n      geometry.dispose()\n\n      axes.forEach((axis) => axis.material.dispose())\n      helpers.forEach((helper) => {\n        helper.material.map?.dispose()\n        helper.material.dispose()\n      })\n    }\n  }\n}\n","export default \"import * as THREE from 'three'\\nimport { ViewHelper } from '.'\\n\\nconst camera = new THREE.PerspectiveCamera()\\nconst renderer = new THREE.WebGLRenderer()\\nconst helper = new ViewHelper(camera, renderer)\\n\""],"names":["getAxisMaterial","color","THREE.MeshBasicMaterial","getSpriteMaterial","text","canvas","context","map","THREE.CanvasTexture","THREE.SpriteMaterial","ViewHelper","THREE.Object3D","camera","renderer","options","__publicField","THREE.Vector3","axisLetters","colorHexes","targetPosition","targetQuaternion","THREE.Quaternion","clock","THREE.Clock","q1","q2","euler","THREE.Euler","viewport","THREE.Vector4","radius","geometry","THREE.BoxGeometry","colors","hex","THREE.Color","axes","THREE.Mesh","raycaster","THREE.Raycaster","pointer","THREE.Vector2","dummy","orthoCamera","THREE.OrthographicCamera","_a","_b","axis","helpers","name","index","sign","material","sprite","THREE.Sprite","helper","point","dim","oldClear","oldRender","animationAngle","render","letter","update","delta","step","prepareAnimationData","object","focusPoint","handleClick","event","rect","offsetX","offsetY","intersects","intersection","args","code"],"mappings":"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"}