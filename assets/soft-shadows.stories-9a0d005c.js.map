{"version":3,"file":"soft-shadows.stories-9a0d005c.js","sources":["../../src/soft-shadows/index.ts"],"sourcesContent":["// From: https://github.com/mrdoob/three.js/blob/dev/examples/webgl_shadowmap_pcss.html\n\nimport * as THREE from 'three'\n\nconst pcss = (focus: number, size: number, samples: number) => `\n#define PENUMBRA_FILTER_SIZE float(${size})\n#define RGB_NOISE_FUNCTION(uv) (randRGB(uv))\nvec3 randRGB(vec2 uv) {\n  return vec3(\n    fract(sin(dot(uv, vec2(12.75613, 38.12123))) * 13234.76575),\n    fract(sin(dot(uv, vec2(19.45531, 58.46547))) * 43678.23431),\n    fract(sin(dot(uv, vec2(23.67817, 78.23121))) * 93567.23423)\n  );\n}\nvec3 lowPassRandRGB(vec2 uv) {\n  // 3x3 convolution (average)\n  // can be implemented as separable with an extra buffer for a total of 6 samples instead of 9\n  vec3 result = vec3(0);\n  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, -1.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0,  0.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2(-1.0, +1.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, -1.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0,  0.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2( 0.0, +1.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, -1.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0,  0.0));\n  result += RGB_NOISE_FUNCTION(uv + vec2(+1.0, +1.0));\n  result *= 0.111111111; // 1.0 / 9.0\n  return result;\n}\nvec3 highPassRandRGB(vec2 uv) {\n  // by subtracting the low-pass signal from the original signal, we're being left with the high-pass signal\n  // hp(x) = x - lp(x)\n  return RGB_NOISE_FUNCTION(uv) - lowPassRandRGB(uv) + 0.5;\n}\nvec2 vogelDiskSample(int sampleIndex, int sampleCount, float angle) {\n  const float goldenAngle = 2.399963f; // radians\n  float r = sqrt(float(sampleIndex) + 0.5f) / sqrt(float(sampleCount));\n  float theta = float(sampleIndex) * goldenAngle + angle;\n  float sine = sin(theta);\n  float cosine = cos(theta);\n  return vec2(cosine, sine) * r;\n}\nfloat penumbraSize( const in float zReceiver, const in float zBlocker ) { // Parallel plane estimation\n  return (zReceiver - zBlocker) / zBlocker;\n}\nfloat findBlocker(sampler2D shadowMap, vec2 uv, float compare, float angle) {\n  float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n  float blockerDepthSum = float(${focus});\n  float blockers = 0.0;\n  int j = 0;\n  vec2 offset = vec2(0.);\n  float depth = 0.;\n  #pragma unroll_loop_start\n  for(int i = 0; i < ${samples}; i ++) {\n    offset = (vogelDiskSample(j, ${samples}, angle) * texelSize) * 2.0 * PENUMBRA_FILTER_SIZE;\n    depth = unpackRGBAToDepth( texture2D( shadowMap, uv + offset));\n    if (depth < compare) {\n      blockerDepthSum += depth;\n      blockers++;\n    }\n    j++;\n  }\n  #pragma unroll_loop_end\n  if (blockers > 0.0) {\n    return blockerDepthSum / blockers;\n  }\n  return -1.0;\n}\n        \nfloat vogelFilter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius, float angle) {\n  float texelSize = 1.0 / float(textureSize(shadowMap, 0).x);\n  float shadow = 0.0f;\n  int j = 0;\n  vec2 vogelSample = vec2(0.0);\n  vec2 offset = vec2(0.0);\n  #pragma unroll_loop_start\n  for (int i = 0; i < ${samples}; i++) {\n    vogelSample = vogelDiskSample(j, ${samples}, angle) * texelSize;\n    offset = vogelSample * (1.0 + filterRadius * float(${size}));\n    shadow += step( zReceiver, unpackRGBAToDepth( texture2D( shadowMap, uv + offset ) ) );\n    j++;\n  }\n  #pragma unroll_loop_end\n  return shadow * 1.0 / ${samples}.0;\n}\nfloat PCSS (sampler2D shadowMap, vec4 coords) {\n  vec2 uv = coords.xy;\n  float zReceiver = coords.z; // Assumed to be eye-space z in this code\n  float angle = highPassRandRGB(gl_FragCoord.xy).r * PI2;\n  float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver, angle);\n  if (avgBlockerDepth == -1.0) {\n    return 1.0;\n  }\n  float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);\n  return vogelFilter(shadowMap, uv, zReceiver, 1.25 * penumbraRatio, angle);\n}`\n\nexport const resetSoftShadows = (\n  renderer: THREE.WebGLRenderer,\n  scene: THREE.Scene,\n  camera: THREE.Camera\n) => {\n  scene.traverse((object) => {\n    if (\n      object instanceof THREE.Mesh &&\n      object.material instanceof THREE.Material\n    ) {\n      renderer.properties.remove(object.material)\n      object.material.dispose()\n    }\n  })\n\n  if (renderer.info.programs !== null) {\n    renderer.info.programs.length = 0\n  }\n\n  renderer.compile(scene, camera)\n}\n\nexport const softShadows = ({\n  focus = 0,\n  size = 25,\n  samples = 10\n}: {\n  focus?: number\n  size?: number\n  samples?: number\n} = {}) => {\n  const original = THREE.ShaderChunk.shadowmap_pars_fragment\n\n  THREE.ShaderChunk.shadowmap_pars_fragment = THREE.ShaderChunk.shadowmap_pars_fragment\n    .replace(\n      '#ifdef USE_SHADOWMAP',\n      '#ifdef USE_SHADOWMAP\\n' + pcss(focus, size, samples)\n    )\n    .replace(\n      '#if defined( SHADOWMAP_TYPE_PCF )',\n      '\\nreturn PCSS(shadowMap, shadowCoord);\\n#if defined( SHADOWMAP_TYPE_PCF )'\n    )\n\n  return ({\n    renderer,\n    scene,\n    camera\n  }: {\n    renderer: THREE.WebGLRenderer\n    scene: THREE.Scene\n    camera: THREE.PerspectiveCamera | THREE.OrthographicCamera\n  }) => {\n    THREE.ShaderChunk.shadowmap_pars_fragment = original\n    resetSoftShadows(renderer, scene, camera)\n  }\n}\n"],"names":["pcss","focus","size","samples","resetSoftShadows","renderer","scene","camera","object","THREE.Mesh","THREE.Material","softShadows","original","THREE.ShaderChunk"],"mappings":"+MAIA,MAAMA,EAAO,CAACC,EAAeC,EAAcC,IAAoB;AAAA,qCAC1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCA2CHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAMXE;AAAA,mCACYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAsBXA;AAAA,uCACeA;AAAA,yDACkBD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAK/BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAcbC,EAAmB,CAC9BC,EACAC,EACAC,IACG,CACGD,EAAA,SAAUE,GAAW,CAEvBA,aAAkBC,GAClBD,EAAO,oBAAoBE,IAElBL,EAAA,WAAW,OAAOG,EAAO,QAAQ,EAC1CA,EAAO,SAAS,UAClB,CACD,EAEGH,EAAS,KAAK,WAAa,OACpBA,EAAA,KAAK,SAAS,OAAS,GAGzBA,EAAA,QAAQC,EAAOC,CAAM,CAChC,EAEaI,EAAc,CAAC,CAC1B,MAAAV,EAAQ,EACR,KAAAC,EAAO,GACP,QAAAC,EAAU,EACZ,EAII,KAAO,CACH,MAAAS,EAAWC,EAAkB,wBAEnCA,OAAAA,EAAkB,wBAA0BA,EAAkB,wBAC3D,QACC,uBACA;AAAA,EAA2Bb,EAAKC,EAAOC,EAAMC,CAAO,CAAA,EAErD,QACC,oCACA;AAAA;AAAA,kCAAA,EAGG,CAAC,CACN,SAAAE,EACA,MAAAC,EACA,OAAAC,CAAA,IAKI,CACJM,EAAkB,wBAA0BD,EAC3BR,EAAAC,EAAUC,EAAOC,CAAM,CAAA,CAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}