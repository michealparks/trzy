var B=Object.defineProperty;var T=(a,e,i)=>e in a?B(a,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):a[e]=i;var n=(a,e,i)=>(T(a,typeof e!="symbol"?e+"":e,i),i);import{E as U,t as X}from"./index-22cc7c1f.js";import{s as H,c as I}from"./lib-934aea98.js";const J=.5*(Math.sqrt(3)-1),d=(3-Math.sqrt(3))/6,M=a=>Math.floor(a)|0,_=new Float64Array([1,1,-1,1,1,-1,-1,-1,1,0,-1,0,1,0,-1,0,0,1,0,-1,0,1,0,-1]);function z(a=Math.random){const e=K(a),i=new Float64Array(e).map(s=>_[s%12*2]),t=new Float64Array(e).map(s=>_[s%12*2+1]);return function(o,b){let N=0,E=0,P=0;const j=(o+b)*J,w=M(o+j),S=M(b+j),A=(w+S)*d,L=w-A,O=S-A,c=o-L,l=b-O;let f,x;c>l?(f=1,x=0):(f=0,x=1);const g=c-f+d,C=l-x+d,F=c-1+2*d,k=l-1+2*d,v=w&255,q=S&255;let h=.5-c*c-l*l;if(h>=0){const r=v+e[q],u=i[r],p=t[r];h*=h,N=h*h*(u*c+p*l)}let m=.5-g*g-C*C;if(m>=0){const r=v+f+e[q+x],u=i[r],p=t[r];m*=m,E=m*m*(u*g+p*C)}let y=.5-F*F-k*k;if(y>=0){const r=v+1+e[q+1],u=i[r],p=t[r];y*=y,P=y*y*(u*F+p*k)}return 70*(N+E+P)}}function K(a){const i=new Uint8Array(512);for(let t=0;t<512/2;t++)i[t]=t;for(let t=0;t<512/2-1;t++){const s=t+~~(a()*(256-t)),o=i[t];i[t]=i[s],i[s]=o}for(let t=256;t<512;t++)i[t]=i[t-256];return i}class Q{constructor(e){n(this,"decay",!1);n(this,"decayRate",.65);n(this,"intensity",.5);n(this,"maxPitch",.05);n(this,"maxRoll",.05);n(this,"maxYaw",.05);n(this,"pitchFrequency",5e-4);n(this,"rollFrequency",5e-4);n(this,"yawFrequency",5e-4);n(this,"time",0);n(this,"yawNoise",z());n(this,"pitchNoise",z());n(this,"rollNoise",z());n(this,"then",0);n(this,"activeControls",null);n(this,"initialRotation",new U);n(this,"camera");n(this,"updateRotation",()=>{this.initialRotation.copy(this.camera.rotation)});n(this,"update",e=>{this.time+=e;const i=this.intensity**2,t=this.maxYaw*i*this.yawNoise(this.time*this.yawFrequency,1),s=this.maxPitch*i*this.pitchNoise(this.time*this.pitchFrequency,1),o=this.maxRoll*i*this.rollNoise(this.time*this.rollFrequency,1);this.camera.rotation.set(this.initialRotation.x+s,this.initialRotation.y+t,this.initialRotation.z+o),this.decay&&this.intensity>0&&(this.intensity-=this.decayRate*e,this.intensity<0?this.intensity=0:this.intensity>1&&(this.intensity=1))});this.camera=e}enable(e){this.then=performance.now(),this.initialRotation.copy(this.camera.rotation),e&&(this.activeControls=e,this.activeControls.addEventListener("change",this.updateRotation))}disable(){this.activeControls&&(this.activeControls.removeEventListener("change",this.updateRotation),this.activeControls=null)}}const V=`import { CameraShake, useRaf } from 'trzy'

const cameraShake = new CameraShake(camera)

// Optionally pass orbitControls if they exist
cameraShake.enable(orbitControls)

useRaf((_, delta) => {
  // Before rendering your scene
  cameraShake.update(delta)
})

cameraShake.disable()`,et={title:"Camera Shake",parameters:{docs:{source:{code:V}}}},W=()=>{const{camera:a,canvas:e,beforeRender:i}=X();H({controls:!0});const t=new Q(a);return t.enable(I),i((s,o)=>{t.update(o)}),e},R={render:W};var G,Y,D;R.parameters={...R.parameters,docs:{...(G=R.parameters)==null?void 0:G.docs,source:{originalSource:`{
  render
}`,...(D=(Y=R.parameters)==null?void 0:Y.docs)==null?void 0:D.source}}};const it=["Primary"];export{R as Primary,it as __namedExportsOrder,et as default};
//# sourceMappingURL=index.stories-8c2a1933.js.map
